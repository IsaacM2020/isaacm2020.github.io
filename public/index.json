
[{"content":"","date":"9 December 2024","externalUrl":null,"permalink":"/tags/blog/","section":"Tags","summary":"","title":"Blog","type":"tags"},{"content":"","date":"9 December 2024","externalUrl":null,"permalink":"/tags/firstpost/","section":"Tags","summary":"","title":"Firstpost","type":"tags"},{"content":"","date":"9 December 2024","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"9 December 2024","externalUrl":null,"permalink":"/","section":"Project 37: By Isaac","summary":"","title":"Project 37: By Isaac","type":"page"},{"content":"","date":"9 December 2024","externalUrl":null,"permalink":"/tags/project37/","section":"Tags","summary":"","title":"Project37","type":"tags"},{"content":"Hello Guys! Welcome to the first post of the blog! This post is about how I made this website. Have fun.\nA few years ago, I watched a video by Ali Abdaal regarding setting up a newsletter. This piqued my interest in the idea of blogging. I started blogging on substack for a few months but I stopped as I lost interest. However, around two weeks ago. Network Chuck, a tech education youtuber, posted a video on how you can create a blog, and host it on a custom domain. This caught my attention, as making a website could be a worthy challenge and would serve me well in the future. The tutorial by Network Chuck was a great start to the website, but did not provide an in-depth way of customizing the website. The purpose of this article is to help individuals not make the same mistakes that I made while trying to make this website.\nI decided to start this project of making a blog, for the following reasons:\nHaving a blog is cool It is fun to post your thoughts online I wanted to use my (free) custom domain name I wanted to learn how to build and host a website for free and from scratch Step 1: Get all of your prerequisites ready\nDownload Obsidian (a note taking tool) from https://obsidian.md/\nDownload Git from https://github.com/git-guides/install-git\nDownload Go from https://go.dev/dl/\nDownload Hugo from https://gohugo.io/installation/ - Do not forget to add it to path\nLaunch terminal on your device and paste the code below\n## to verify that hugo works hugo verson After pasting the code above in the terminal, if there is an error, there has been an issue with the installation of hugo or adding it to path. Step 2: Create a new site\nGo to a directory where your website details will be stored. For example I used: C:\\Users\\isaac In the code below swap \u0026lsquo;websitename\u0026rsquo; to the name of your website. The name that you add only applies to the name of the website folder, not the name on the internet. ## create a new site hugo new site websitename ## go into the website directory cd websitename Step 3: Choose a theme from Hugo and download it\nThere are countless theme that you can choose from https://themes.gohugo.io/ but for this guide I am going to use the theme named \u0026lsquo;Blowfish\u0026rsquo;. In my opinion, this theme looks the best from the couple hundred available themes due to its never ending customizability features.\nThe following lines of code will initilize git and download the blowfish theme\n## initilazing git git init ## git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish Step 4: Set up the configuration files for blowfish\nOpen file explorer and open the file directory where your website code resides. !\rOpen the \u0026rsquo;themes\u0026rsquo; folder and open the theme called \u0026lsquo;blowfish\u0026rsquo;, in there copy the \u0026lsquo;config\u0026rsquo; folder and paste it in the root directory of the website. !\r5. Lessons Learned #\rPatience and Research: The importance of understanding the tools and reading documentation. Experimenting with Customization: How you learned to tweak the website to suit your needs. Continuous Learning: Emphasize how setting up this blog has been a learning process and how you plan to continue evolving it. 6. Final Thoughts #\rRecap the process of setting up the blog and the key points from your article. Encourage readers to take on similar projects and learn from your experience. Mention future plans for the blog and what content readers can expect in the coming months. 7. Call to Action #\rInvite readers to comment with their experiences if they’ve set up their own blogs or have questions. Mention subscribing to your newsletter or following for future posts. !\r","date":"9 December 2024","externalUrl":null,"permalink":"/posts/first-post/","section":"Posts","summary":"","title":"Setting Up The Blog","type":"posts"},{"content":"Hello Guys! Welcome to the first post of the blog! This post is about how I made this website. Have fun.\nA few years ago, I watched a video by Ali Abdaal regarding setting up a newsletter. This piqued my interest in the idea of blogging. I started blogging on substack for a few months but I stopped as I lost interest. However, around two weeks ago. Network Chuck, a tech education youtuber, posted a video on how you can create a blog, and host it on a custom domain. This caught my attention, as making a website could be a worthy challenge and would serve me well in the future. The tutorial by Network Chuck was a great start to the website, but did not provide an in-depth way of customizing the website. The purpose of this article is to help individuals not make the same mistakes that I made while trying to make this website.\nI decided to start this project of making a blog, for the following reasons:\nHaving a blog is cool It is fun to post your thoughts online I wanted to use my (free) custom domain name I wanted to learn how to build and host a website for free and from scratch Step 1: Get all of your prerequisites ready\nDownload Obsidian (a note taking tool) from https://obsidian.md/\nDownload Git from https://github.com/git-guides/install-git\nDownload Go from https://go.dev/dl/\nDownload Hugo from https://gohugo.io/installation/ - Do not forget to add it to path\nLaunch terminal on your device and paste the code below\n## to verify that hugo works\rhugo verson After pasting the code above in the terminal, if there is an error, there has been an issue with the installation of hugo or adding it to path. Step 2: Create a new site\nGo to a directory where your website details will be stored. For example I used: C:\\Users\\isaac In the code below swap \u0026lsquo;websitename\u0026rsquo; to the name of your website. The name that you add only applies to the name of the website folder, not the name on the internet. ## create a new site\rhugo new site websitename\r## go into the website directory\rcd websitename Step 3: Choose a theme from Hugo and download it\nThere are countless theme that you can choose from https://themes.gohugo.io/ but for this guide I am going to use the theme named \u0026lsquo;Blowfish\u0026rsquo;. In my opinion, this theme looks the best from the couple hundred available themes due to its never ending customizability features.\nThe following lines of code will initilize git and download the blowfish theme\n## initilazing git\rgit init\r##\rgit submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish Step 4: Set up the configuration files for blowfish\nOpen file explorer and open the file directory where your website code resides. !!\rOpen the \u0026rsquo;themes\u0026rsquo; folder and open the theme called \u0026lsquo;blowfish\u0026rsquo;, in there copy the \u0026lsquo;config\u0026rsquo; folder and paste it in the root directory of the website. !!\r5. Lessons Learned #\rPatience and Research: The importance of understanding the tools and reading documentation. Experimenting with Customization: How you learned to tweak the website to suit your needs. Continuous Learning: Emphasize how setting up this blog has been a learning process and how you plan to continue evolving it. 6. Final Thoughts #\rRecap the process of setting up the blog and the key points from your article. Encourage readers to take on similar projects and learn from your experience. Mention future plans for the blog and what content readers can expect in the coming months. 7. Call to Action #\rInvite readers to comment with their experiences if they’ve set up their own blogs or have questions. Mention subscribing to your newsletter or following for future posts. **!!\r**\nimport os import re import shutil import sys from tkinter import Tk, Label, Entry, Button, filedialog, messagebox, Listbox, Scrollbar, Frame from tkinterdnd2 import TkinterDnD, DND_FILES import subprocess from PIL import Image import json # Global variables featured_image_path = None dropped_files = [] config_file = os.path.join(os.path.expanduser(\u0026#39;~\u0026#39;), \u0026#39;.markdown_processor_config.json\u0026#39;) paths = {} def get_default_directories(): \u0026#34;\u0026#34;\u0026#34;Attempt to find sensible default directories based on the system.\u0026#34;\u0026#34;\u0026#34; home_dir = os.path.expanduser(\u0026#39;~\u0026#39;) return { \u0026#34;documents\u0026#34;: os.path.join(home_dir, \u0026#34;Documents\u0026#34;), \u0026#34;obsidian_vault\u0026#34;: os.path.join(home_dir, \u0026#34;Obsidian\u0026#34;), \u0026#34;site_repo\u0026#34;: os.path.join(home_dir, \u0026#34;Projects\u0026#34;, \u0026#34;site\u0026#34;) } def load_or_set_paths(): global paths # First, try to load existing configuration if os.path.exists(config_file): try: with open(config_file, \u0026#34;r\u0026#34;) as file: paths = json.load(file) # Validate paths exist for key, path in paths.items(): if not os.path.exists(path): raise FileNotFoundError(f\u0026#34;{key} path does not exist\u0026#34;) return except (json.JSONDecodeError, FileNotFoundError): # If config is invalid or paths don\u0026#39;t exist, proceed to manual selection pass # If no valid config exists, get default directories default_dirs = get_default_directories() # Create a configuration dialog root = Tk() root.withdraw() # Hide the main window # Ask for each directory with defaults paths = {} for key, default_path in default_dirs.items(): path = filedialog.askdirectory( title=f\u0026#34;Select Your {key.replace(\u0026#39;_\u0026#39;, \u0026#39; \u0026#39;).title()} Directory\u0026#34;, initialdir=default_path ) # If user cancels, use the default path paths[key] = path if path else default_path # Ensure the site repo and other crucial directories exist for key, path in paths.items(): os.makedirs(path, exist_ok=True) # Save the configuration try: with open(config_file, \u0026#34;w\u0026#34;) as file: json.dump(paths, file, indent=4) except Exception as e: messagebox.showwarning(\u0026#34;Configuration Save Error\u0026#34;, f\u0026#34;Could not save configuration: {str(e)}\u0026#34;) root.destroy() def resolve_site_structure(base_path): \u0026#34;\u0026#34;\u0026#34;Dynamically find or create the Hugo site content structure\u0026#34;\u0026#34;\u0026#34; possible_content_paths = [ os.path.join(base_path, \u0026#34;content\u0026#34;, \u0026#34;posts\u0026#34;), os.path.join(base_path, \u0026#34;site\u0026#34;, \u0026#34;content\u0026#34;, \u0026#34;posts\u0026#34;), os.path.join(base_path, \u0026#34;hugo\u0026#34;, \u0026#34;content\u0026#34;, \u0026#34;posts\u0026#34;), ] for content_path in possible_content_paths: if os.path.exists(content_path): return content_path # If no existing structure, create a default one default_content_path = os.path.join(base_path, \u0026#34;content\u0026#34;, \u0026#34;posts\u0026#34;) os.makedirs(default_content_path, exist_ok=True) return default_content_path def process_files(): global featured_image_path, dropped_files target_folder_name = target_folder_entry.get() if not target_folder_name.strip(): messagebox.showerror(\u0026#34;Error\u0026#34;, \u0026#34;Please enter a folder name.\u0026#34;) return # Dynamically resolve the content posts directory posts_base_path = resolve_site_structure(paths[\u0026#34;site_repo\u0026#34;]) # Define target folder path target_folder = os.path.join(posts_base_path, target_folder_name) # Check if the target folder exists and replace it if os.path.exists(target_folder): shutil.rmtree(target_folder) # Remove the existing folder # Create a new folder os.makedirs(target_folder, exist_ok=True) first_image_handled = False # Flag to handle the first image duplication for filepath in dropped_files: filename = os.path.basename(filepath) if filename.endswith(\u0026#34;.md\u0026#34;): # Process Markdown files with open(filepath, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as file: content = file.read() # Find and replace image links images = re.findall(r\u0026#39;\\[\\[([^]]*\\.png)\\]\\]\u0026#39;, content) for image in images: # Preserve the original filename, ensuring spaces are URL encoded as %20 encoded_image = image.replace(\u0026#39; \u0026#39;, \u0026#39;%20\u0026#39;) markdown_image = f\u0026#34;!![Image Description]({encoded_image})\u0026#34; content = content.replace(f\u0026#34;[[{image}]]\u0026#34;, markdown_image) # Handle the first image duplication if not first_image_handled: source_image_path = os.path.join(os.path.dirname(filepath), image) if os.path.exists(source_image_path): target_image_path = os.path.join(target_folder, image) shutil.copy(source_image_path, target_image_path) # Copy the original image first_image_handled = True # Write updated content to new Markdown file in target folder target_md_path = os.path.join(target_folder, \u0026#34;index.md\u0026#34;) with open(target_md_path, \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as file: file.write(content) elif filename.endswith((\u0026#34;.png\u0026#34;, \u0026#34;.jpg\u0026#34;, \u0026#34;.jpeg\u0026#34;)): # Copy image files to target folder shutil.copy(filepath, target_folder) # Handle featured image if featured_image_path and os.path.exists(featured_image_path): featured_target_path = os.path.join(target_folder, \u0026#34;featured.png\u0026#34;) # Convert to PNG if not already if not featured_image_path.lower().endswith(\u0026#39;.png\u0026#39;): img = Image.open(featured_image_path) img.save(featured_target_path, \u0026#39;PNG\u0026#39;) else: shutil.copy(featured_image_path, featured_target_path) messagebox.showinfo(\u0026#34;Success\u0026#34;, f\u0026#34;Files processed and saved to:\\n{target_folder}\u0026#34;) # Reset featured image and list of dropped files after processing dropped_files = [] featured_image_path = None dropped_files_label.config(text=\u0026#34;Drop files here\u0026#34;) featured_image_label.config(text=\u0026#34;No image selected\u0026#34;) def select_featured_image(): global featured_image_path initial_dir = paths.get(\u0026#34;obsidian_vault\u0026#34;, os.path.expanduser(\u0026#39;~\u0026#39;)) filetypes = [ (\u0026#34;PNG files\u0026#34;, \u0026#34;*.png\u0026#34;), (\u0026#34;JPEG files\u0026#34;, \u0026#34;*.jpg *.jpeg\u0026#34;), (\u0026#34;All image files\u0026#34;, \u0026#34;*.png *.jpg *.jpeg\u0026#34;) ] featured_image_path = filedialog.askopenfilename( initialdir=initial_dir, title=\u0026#34;Select Featured Image\u0026#34;, filetypes=filetypes ) if featured_image_path: featured_image_label.config(text=f\u0026#34;Selected: {os.path.basename(featured_image_path)}\u0026#34;) else: featured_image_label.config(text=\u0026#34;No image selected\u0026#34;) def on_drop(event): global dropped_files dropped_files = event.data.split(\u0026#34; \u0026#34;) dropped_files_label.config(text=\u0026#34;\\n\u0026#34;.join(dropped_files)) def browse_files(): global dropped_files initial_dir = paths.get(\u0026#34;obsidian_vault\u0026#34;, os.path.expanduser(\u0026#39;~\u0026#39;)) filetypes = [(\u0026#34;All files\u0026#34;, \u0026#34;*.*\u0026#34;)] selected_files = filedialog.askopenfilenames( initialdir=initial_dir, title=\u0026#34;Select Markdown or Image Files\u0026#34;, filetypes=filetypes ) # Update dropped_files and label dropped_files.extend(selected_files) dropped_files_label.config(text=\u0026#34;\\n\u0026#34;.join(dropped_files)) def push_to_github(): try: # Dynamically find the git repository site_path = paths[\u0026#34;site_repo\u0026#34;] # Verify it\u0026#39;s a git repository if not os.path.exists(os.path.join(site_path, \u0026#34;.git\u0026#34;)): messagebox.showerror(\u0026#34;Error\u0026#34;, \u0026#34;Not a git repository. Please select a valid repository.\u0026#34;) return # Change to the repository directory os.chdir(site_path) # Run Git commands commands = [ [\u0026#34;git\u0026#34;, \u0026#34;add\u0026#34;, \u0026#34;.\u0026#34;], [\u0026#34;git\u0026#34;, \u0026#34;commit\u0026#34;, \u0026#34;-m\u0026#34;, f\u0026#34;Site update: {os.path.basename(target_folder_entry.get())}\u0026#34;], [\u0026#34;git\u0026#34;, \u0026#34;pull\u0026#34;], [\u0026#34;git\u0026#34;, \u0026#34;push\u0026#34;, \u0026#34;-u\u0026#34;, \u0026#34;origin\u0026#34;, \u0026#34;master\u0026#34;] ] # Execute each command and capture output for cmd in commands: result = subprocess.run(cmd, capture_output=True, text=True, check=True) print(f\u0026#34;Command {\u0026#39; \u0026#39;.join(cmd)} output: {result.stdout}\u0026#34;) # Show success message messagebox.showinfo(\u0026#34;GitHub Push\u0026#34;, \u0026#34;Successfully pushed to GitHub!\u0026#34;) except subprocess.CalledProcessError as e: # Handle Git command errors error_message = f\u0026#34;Git error: {e.stderr}\u0026#34; messagebox.showerror(\u0026#34;GitHub Push Error\u0026#34;, error_message) except Exception as e: # Handle other potential errors messagebox.showerror(\u0026#34;Error\u0026#34;, str(e)) def load_posts(): # Dynamically resolve the content posts directory posts_base_path = resolve_site_structure(paths[\u0026#34;site_repo\u0026#34;]) print(f\u0026#34;Looking for posts in: {posts_base_path}\u0026#34;) # Check if the posts folder exists if os.path.exists(posts_base_path): # Try to list directories inside the posts folder posts = [f for f in os.listdir(posts_base_path) if os.path.isdir(os.path.join(posts_base_path, f))] # Debugging: Print the list of posts found if posts: print(f\u0026#34;Found the following posts: {posts}\u0026#34;) else: print(\u0026#34;No post folders found.\u0026#34;) # Clear previous list and load new posts post_listbox.delete(0, \u0026#39;end\u0026#39;) # Clear previous list for post in posts: post_listbox.insert(\u0026#39;end\u0026#39;, post) # Add each post folder to the listbox else: print(f\u0026#34;Post folder does not exist at the path: {posts_base_path}\u0026#34;) messagebox.showerror(\u0026#34;Error\u0026#34;, \u0026#34;Posts folder not found.\u0026#34;) def delete_post(): selected_post = post_listbox.curselection() if not selected_post: messagebox.showerror(\u0026#34;Error\u0026#34;, \u0026#34;Please select a post to delete.\u0026#34;) return post_name = post_listbox.get(selected_post) # Dynamically resolve the content posts directory posts_base_path = resolve_site_structure(paths[\u0026#34;site_repo\u0026#34;]) posts_folder = os.path.join(posts_base_path, post_name) # Confirm deletion if messagebox.askyesno(\u0026#34;Confirm Deletion\u0026#34;, f\u0026#34;Are you sure you want to delete the post: {post_name}?\u0026#34;): shutil.rmtree(posts_folder) # Delete the post folder load_posts() # Reload the post list # Initialize the GUI load_or_set_paths() root = TkinterDnD.Tk() root.title(\u0026#34;Markdown and Image Processor with Post Manager\u0026#34;) root.geometry(\u0026#34;800x800\u0026#34;) # Main layout frame main_frame = Frame(root) main_frame.pack(fill=\u0026#34;both\u0026#34;, expand=True, padx=10, pady=10) # Left column for instructions, file dropping, and target folder left_frame = Frame(main_frame) left_frame.grid(row=0, column=0, sticky=\u0026#34;n\u0026#34;) # Instructions Label(left_frame, text=\u0026#34;Drag and drop Markdown and image files below:\u0026#34;).pack(pady=10) # Drop target area dropped_files_label = Label(left_frame, text=\u0026#34;Drop files here\u0026#34;, bg=\u0026#34;lightgray\u0026#34;, relief=\u0026#34;sunken\u0026#34;, width=50, height=10) dropped_files_label.pack(pady=10) dropped_files_label.drop_target_register(DND_FILES) dropped_files_label.dnd_bind(\u0026#34;\u0026lt;\u0026lt;Drop\u0026gt;\u0026gt;\u0026#34;, on_drop) # Browse files button browse_button = Button(left_frame, text=\u0026#34;Browse Files\u0026#34;, command=browse_files) browse_button.pack(pady=5) # Target folder name input Label(left_frame, text=\u0026#34;Enter new post folder:\u0026#34;).pack(pady=10) target_folder_entry = Entry(left_frame, width=40) target_folder_entry.pack(pady=5) # Featured Image section Label(left_frame, text=\u0026#34;Featured Image:\u0026#34;).pack(pady=5) # Featured image selection button featured_image_button = Button(left_frame, text=\u0026#34;Select Featured Image\u0026#34;, command=select_featured_image) featured_image_button.pack(pady=5) # Label to show selected featured image featured_image_label = Label(left_frame, text=\u0026#34;No image selected\u0026#34;) featured_image_label.pack(pady=5) # Right column for actions and post management right_frame = Frame(main_frame) right_frame.grid(row=0, column=1, sticky=\u0026#34;n\u0026#34;) # Process button process_button = Button(right_frame, text=\u0026#34;Process Files\u0026#34;, command=process_files) process_button.pack(pady=20) # GitHub Push button github_push_button = Button(right_frame, text=\u0026#34;Push to GitHub\u0026#34;, command=push_to_github) github_push_button.pack(pady=20) # Post management section Label(right_frame, text=\u0026#34;Manage Posts:\u0026#34;).pack(pady=10) # Listbox to display posts post_listbox = Listbox(right_frame, width=50, height=10) post_listbox.pack(pady=10) # Scrollbar for the listbox scrollbar = Scrollbar(right_frame, orient=\u0026#34;vertical\u0026#34;, command=post_listbox.yview) scrollbar.pack(side=\u0026#34;right\u0026#34;, fill=\u0026#34;y\u0026#34;) post_listbox.config(yscrollcommand=scrollbar.set) # Load posts button load_button = Button(right_frame, text=\u0026#34;Load Posts\u0026#34;, command=load_posts) load_button.pack(pady=5) # Delete post button delete_button = Button(right_frame, text=\u0026#34;Delete Selected Post\u0026#34;, command=delete_post) delete_button.pack(pady=5) # Start the GUI event loop root.mainloop() ","date":"9 December 2024","externalUrl":null,"permalink":"/posts/try_touch_mala_agai/","section":"Posts","summary":"","title":"Setting Up The Blog","type":"posts"},{"content":"Hello Guys! Welcome to the first post of the blog! This post is about how I made this website. Have fun.\nA few years ago, I watched a video by Ali Abdaal regarding setting up a newsletter. This piqued my interest in the idea of blogging. I started blogging on substack for a few months but I stopped as I lost interest. However, around two weeks ago. Network Chuck, a tech education youtuber, posted a video on how you can create a blog, and host it on a custom domain. This caught my attention, as making a website could be a worthy challenge and would serve me well in the future. The tutorial by Network Chuck was a great start to the website, but did not provide an in-depth way of customizing the website. The purpose of this article is to help individuals not make the same mistakes that I made while trying to make this website.\nI decided to start this project of making a blog, for the following reasons:\nHaving a blog is cool It is fun to post your thoughts online I wanted to use my (free) custom domain name I wanted to learn how to build and host a website for free and from scratch Step 1: Get all of your prerequisites ready\nDownload Obsidian (a note taking tool) from https://obsidian.md/\nDownload Git from https://github.com/git-guides/install-git\nDownload Go from https://go.dev/dl/\nDownload Hugo from https://gohugo.io/installation/ - Do not forget to add it to path\nLaunch terminal on your device and paste the code below\n## to verify that hugo works\rhugo verson After pasting the code above in the terminal, if there is an error, there has been an issue with the installation of hugo or adding it to path. Step 2: Create a new site\nGo to a directory where your website details will be stored. For example I used: C:\\Users\\isaac In the code below swap \u0026lsquo;websitename\u0026rsquo; to the name of your website. The name that you add only applies to the name of the website folder, not the name on the internet. ## create a new site\rhugo new site websitename\r## go into the website directory\rcd websitename Step 3: Choose a theme from Hugo and download it\nThere are countless theme that you can choose from https://themes.gohugo.io/ but for this guide I am going to use the theme named \u0026lsquo;Blowfish\u0026rsquo;. In my opinion, this theme looks the best from the couple hundred available themes due to its never ending customizability features.\nThe following lines of code will initilize git and download the blowfish theme\n## initilazing git\rgit init\r##\rgit submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish Step 4: Set up the configuration files for blowfish\nOpen file explorer and open the file directory where your website code resides. !!\rOpen the \u0026rsquo;themes\u0026rsquo; folder and open the theme called \u0026lsquo;blowfish\u0026rsquo;, in there copy the \u0026lsquo;config\u0026rsquo; folder and paste it in the root directory of the website. !!\r5. Lessons Learned #\rPatience and Research: The importance of understanding the tools and reading documentation. Experimenting with Customization: How you learned to tweak the website to suit your needs. Continuous Learning: Emphasize how setting up this blog has been a learning process and how you plan to continue evolving it. 6. Final Thoughts #\rRecap the process of setting up the blog and the key points from your article. Encourage readers to take on similar projects and learn from your experience. Mention future plans for the blog and what content readers can expect in the coming months. 7. Call to Action #\rInvite readers to comment with their experiences if they’ve set up their own blogs or have questions. Mention subscribing to your newsletter or following for future posts. !!\r","date":"9 December 2024","externalUrl":null,"permalink":"/posts/tryagain/","section":"Posts","summary":"","title":"Setting Up The Blog","type":"posts"},{"content":"","date":"9 December 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]